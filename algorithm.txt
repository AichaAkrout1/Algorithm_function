Problem 1Â :

import java.util.*;

public class DistinctElementsInTwoSets {
    
    public static void findDistinctElements(int [] setOne, int [] setTwo){

        System.out.println("Set 1: " + Arrays.toString(setOne) + ", Set 2: " + Arrays.toString(setTwo));
        Map<Integer, Integer> map = new HashMap<>();

        for (int i = 0; i <setOne.length ; i++) {
            int element = setOne[i];
            if(map.containsKey(element)) {
                int count = map.get(element);
                map.put(element, count+1);
            }else
                map.put(element, 1);
        }

        for (int i = 0; i <setTwo.length ; i++) {
            int element = setTwo[i];
            if(map.containsKey(element)) {
                int count = map.get(element);
                map.put(element, count+1);
            }else
                map.put(element, 1);
        }

        //get sum of distinct elements
        int sum = 0;
        Set<Integer> set = map.keySet();
        Iterator<Integer> iterator = set.iterator();
        while (iterator.hasNext()){
            int key = iterator.next();
            if(map.get(key)==1)
                sum += key;
        }

        System.out.println("Distinct Elements Sum : " + sum);
    }

    public static void main(String[] args) {
        int [] setOne = {3, 1, 7, 9};
        int [] setTwo = {2, 4, 1, 9, 3};
        findDistinctElements(setOne, setTwo);
    }
}

Problem 2:

import java.io.*;
 
class GFG {
 
    static int n = 3;
 
    
    static int dotProduct(int vect_A[], int vect_B[])
    {
 
        int product = 0;
 
        
        for (int i = 0; i < n; i++)
            product = product + vect_A[i] * vect_B[i];
        return product;
    }
 
   
    static void orthogonalProduct(int vect_A[], int vect_B[],
                             int ortho_p[])
 
    {
 
        ortho_p[0] = vect_A[1] * vect_B[2]
                     - vect_A[2] * vect_B[1];
        ortho_p[1] = vect_A[2] * vect_B[0]
                     - vect_A[0] * vect_B[2];
        ortho_p[2] = vect_A[0] * vect_B[1]
                     - vect_A[1] * vect_B[0];
    }
 
    public static void main(String[] args)
    {
        int vect_A[] = { 3, -5, 4 };
        int vect_B[] = { 2, 6, 5 };
        int ortho_p[] = new int[n];
 
        
        System.out.print("Dot product:");
        System.out.println(dotProduct(vect_A, vect_B));
 
       
        System.out.print("orthogonal product:");
        ortho_p(vect_A, vect_B, ortho_p);
 
      
        
        for (int i = 0; i < n; i++)
 
            System.out.print(ortho_p[i] + " ");
    }
}
 
